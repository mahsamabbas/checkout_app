<?php

namespace Tests\Feature\Http\Controllers;

use Arr;
use Http;
use Tests\TestCase;
use App\Models\User;
use App\Models\Project;
use Illuminate\Foundation\Testing\WithFaker;
use JMac\Testing\Traits\AdditionalAssertions;
use Illuminate\Foundation\Testing\RefreshDatabase;
use App\Http\Requests\ProjectCheckoutStoreRequest;
use App\Http\Controllers\ProjectBraintreeCheckoutController;

class ProjectCheckoutControllerTest extends TestCase
{
    use AdditionalAssertions, RefreshDatabase, WithFaker;

    /**
     * @var Project $project
     */
    private $project;

    /**
     * @test
     */
    public function create_displays_view()
    {
        $response = $this->get(route("projects.checkouts.create", $this->project));

        $response->assertStatus(200);
        $response->assertViewIs("checkout.braintree");
        $response->assertViewHas("project", $this->project);
        $response->assertViewHas("clientToken");
        $response->assertViewHas("environment");
    }

    /**
     * @test
     */
    public function store_uses_form_request_validation()
    {
        $this->assertActionUsesFormRequest(
            ProjectBraintreeCheckoutController::class,
            'store',
            ProjectCheckoutStoreRequest::class
        );
    }

    /**
     * @test
     */
    public function store_saves_and_redirects()
    {
        $response = $this->post(route("projects.checkouts.store", $this->project), [
            "email" => $this->faker->email,
            "payment_method_nonce" => Arr::random($this->paymentMethodeNonceProvider())
        ]);
        $response->assertRedirect($this->project->reservation_redirect_url);
    }

    private function paymentMethodeNonceProvider()
    {
        return [
            "fake-valid-nonce",
            "fake-valid-no-billing-address-nonce",
            "fake-valid-visa-nonce",
        ];
    }

    /**
     * @test
     */
    public function dose_not_store_and_redirect_for_not_valid_nonce()
    {
        Http::fake();
        $response = $this->post(route("projects.checkouts.store", $this->project), [
            "email" => $this->faker->email,
            "payment_method_nonce" => "three_d_secure_authentication_id"
        ]);
        $response->assertRedirect();
        $response->assertSessionHas("error");
    }

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->project = Project::factory()->create();
        $this->actingAs(User::factory()->create());
    }
}